{"version":3,"sources":["Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","id","href","class","App","useState","users","setUsers","console","log","setLoading","pageNumber","setPageNumber","pagesVisited","useEffect","a","axios","get","res","data","fetchPosts","displayUsers","slice","map","user","src","userId","title","pageCount","Math","ceil","length","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAgBeA,EAbA,WACX,OACI,qBAAIC,UAAU,OAAd,UACI,6BAAI,mBAAGC,GAAG,OAAN,2BACJ,6BAAI,mBAAGA,GAAG,MAAMC,KAAK,IAAjB,oBACJ,6BAAI,mBAAGD,GAAG,MAAMC,KAAK,IAAjB,qBACJ,6BAAI,mBAAGD,GAAG,QAAQC,KAAK,IAAnB,uBACJ,wBAAQC,MAAM,OAAd,yBC8EGC,EAlFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACAC,QAAQC,IAAI,SAASH,GACrB,MAA8BD,oBAAS,GAAvC,mBAAgBK,GAAhB,WACA,EAAiCL,mBAAS,GAA1C,mBAAOM,EAAP,KAAkBC,EAAlB,KAGMC,EAAeF,EADA,GAGrBG,qBAAW,YACO,uCAAG,4BAAAC,EAAA,6DACjBL,GAAW,GADM,SAECM,IAAMC,IAAI,8CAFX,OAEXC,EAFW,OAGjBX,EAASW,EAAIC,MACbT,GAAW,GACXF,QAAQC,IAAI,aAAaS,GALR,2CAAH,qDAQhBE,KACC,IAEH,IAAMC,EAAcf,EAAMgB,MAAMT,EAAaA,EAfxB,IAiBpBU,KAAI,SAACC,GAEF,OACE,sBAAKxB,UAAU,QAAf,UAEI,qBAAKA,UAAU,QAAf,SACI,qBAAKyB,IAAI,uGAGb,qBAAKzB,UAAU,QAAf,SACE,6BAAKwB,EAAKE,WAKZ,sBAAK1B,UAAU,OAAf,UAEA,oBAAIA,UAAU,OAAd,SAAsBwB,EAAKG,QAC3B,wBAAQ3B,UAAU,MAAlB,mCASF4B,EAAYC,KAAKC,KAAKxB,EAAMyB,OA5Cf,IAqDrB,OACE,sBAAK/B,UAAU,iBAAf,UACE,cAAC,EAAD,IADF,MAEGqB,EAED,cAAC,IAAD,CACEW,cAAe,WACfC,UAAW,OACXL,UAAWA,EACXM,aAhBe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClBvB,EAAcuB,IAgBdC,mBAAoB,kBACpBC,sBAAuB,eACvBC,kBAAmB,WACnBC,kBAAmB,qBACnBC,gBAAiB,yBCnEVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f700d979.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <ul className=\"navy\">\r\n            <li><a id=\"zero\">Read Quotes</a></li>\r\n            <li><a id=\"one\" href=\"#\">Home</a></li>\r\n            <li><a id=\"two\" href=\"#\">About</a></li>\r\n            <li><a id=\"three\" href=\"#\">Profile</a></li>\r\n            <button class=\"butt\">Contact</button>\r\n        </ul>\r\n\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, { useState, useEffect } from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Navbar from \"./Navbar\";\r\n\r\nconst App = () => {\r\n  const [users, setUsers] = useState([]);\r\n  console.log(\"heheeh\",users)\r\n  const [loading, setLoading] = useState(false);\r\n  const [pageNumber,setPageNumber]=useState(0);\r\n\r\n  const usersPerPage = 10;\r\n  const pagesVisited = pageNumber + usersPerPage;\r\n  \r\n  useEffect (() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\r\n      setUsers(res.data);\r\n      setLoading(false);\r\n      console.log('I got this',res)\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  const displayUsers =users.slice(pagesVisited,pagesVisited + usersPerPage)\r\n  \r\n  .map((user) => {\r\n      \r\n      return (\r\n        <div className=\"cards\">\r\n\r\n            <div className=\"image\">\r\n                <img src=\"https://st.depositphotos.com/1428083/2946/i/600/depositphotos_29460297-stock-photo-bird-cage.jpg\"/>\r\n            </div>\r\n\r\n            <div className=\"title\">\r\n              <h3>{user.userId}</h3>\r\n            </div>\r\n\r\n             \r\n          \r\n            <div className=\"desc\">\r\n\r\n            <h3 className=\"head\">{user.title}</h3>\r\n            <button className=\"but\"> Read More!!</button>\r\n          \r\n            </div>\r\n\r\n        </div> \r\n \r\n        )\r\n      \r\n    });\r\n    const pageCount = Math.ceil(users.length / usersPerPage)\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected)\r\n    };\r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <Navbar/>npm\r\n      {displayUsers}\r\n\r\n      <ReactPaginate\r\n        previousLabel={\"Previous\"}\r\n        nextLabel={\"Next\"}\r\n        pageCount={pageCount}\r\n        onPageChange={changePage}\r\n        containerClassName={\"paginationBttns\"}\r\n        previousLinkClassName={\"previousBttn\"}\r\n        nextLinkClassName={\"nextBttn\"}\r\n        disabledClassName={\"paginationDisabled\"}\r\n        activeClassName={\"paginationActive\"}\r\n      /> \r\n\r\n     </div>  \r\n    \r\n   \r\n  ); \r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}